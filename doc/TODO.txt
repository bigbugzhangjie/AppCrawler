	
【TODO】
	* 编写脚本，多台机器定期拷贝结果到： sinosig101/bigdata/share/appCrawler 目录
	* 与诗阳商量，将出错的爬取结果（图片/全空）找到对应的vcf，定期整理后再重新跑。
	* 调用VCardFileGenerator前，扫描所有已经处理过的vcf文件中的手机号，避免重复爬取
	
【DONE】
	* 手机联系人上传到微博app的最大数目
		无限制。
		尝试过10000个手机号码
	* 每次上传名单后，最多的返回结果数目
		51个。 
		做过120人，1000人，10000人的实验. 1000人和10000人均返回51个。
	* 测试，结果一致性： 
		a. 用不同的帐号，处理同一批手机号，返回结果一致。
			一致。
		b. 同样一批客户名单（400），打乱顺序后再次爬取，确认结果一致性。
			一致。
		c. 一份800人的名单，跑一次；再将其分成几份：100人，100人，200人，400人，然后分别跑结果，看两次是否一致。
			一致。
	* 合理的上传名单数目（）
		10月26日做过实验，每轮120个手机号，6轮，返回匹配帐号数量为：9，3，12，11，8,9。
		最多的一轮为10%的匹配度,平均为7%，因此，每个帐号每轮爬取分配400个名单比较合理；
	* full.sh中vcf文件数，和page翻页数是否需要自动配置?  
		不用.
	* OCR：png--> tiff --> txt
		已试用：office工具，汉王OCR，捷速OCR；office工具比较好用。
	* 是否用java中的Robot类重新实现上述所有程序？
		不用。有些动作，比如拷贝文件/删除文件/启动模拟器等，用命令行更方便
	* 测试：一份名单，跑一遍之后去除匹配到微博的手机号，再跑一遍剩下的，看是否真的没有匹配到的
		真的没有匹配到的.
	* 测试：一份全空匹配的名单，换一台机器，换一个帐号，再跑一遍； 
		能匹配成功，不再全空。
	* 整个工程打成runnable jar